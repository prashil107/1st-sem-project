import tkinter as tk 
from tkinter import messagebox 
from PIL import Image, ImageTk 
 
class CafeteriaOrderingSystem: 
    def __init__(self, root): 
        self.root = root 
        self.root.title("Cafeteria Ordering System") 
 
        # Calculate the screen width and height 
        screen_width = root.winfo_screenwidth() 
        screen_height = root.winfo_screenheight() 
 
        # Calculate the window width and height 
        window_width = 1100 
        window_height = 700 
 
        # Calculate the x and y coordinates to center the window 
        x_coordinate = (screen_width - window_width) // 2 
        y_coordinate = (screen_height - window_height) // 2 
 
        # Set the window geometry 
        self.root.geometry(f"{window_width}x{window_height}+{x_coordinate}+{y_coordinate}"
) 
        self.root.resizable(False, False) 
 
        # Menu items with images 
        self.menu_items = { 
            'Espresso': {'cost': 50, 'image_path': 'espresso.jpeg'}, 
            'Cappuccino': {'cost': 80, 'image_path': 'cappuccino.jpeg'}, 
            'Latte': { 'cost': 90, 'image_path': 'latte.jpeg'}, 
            'Americano': {'cost': 70, 'image_path': 'americano.jpeg'}, 
            'Mocha': {'cost': 85, 'image_path': 'mocha.jpeg'}, 
            'Macchiato': {'cost': 75, 'image_path': 'macchiato.jpeg'}, 
            'Chai Latte': {'cost': 60, 'image_path': 'chai latte.jpeg'}, 
            'Hot Chocolate': {'cost': 70, 'image_path': 'hot chocolate.jpeg'}, 
            'Iced Coffee': {'cost': 75, 'image_path': 'iced coffee.jpeg'}, 
            'Fruit Smoothie': {'cost': 100, 'image_path': 'fruit smoothie.jpg'}, 
            'Croissant': {'cost': 40,'image_path': 'croissant.jpeg'}, 
            'Blueberry Muffin': {'cost': 45, 'image_path': 'blue berry muffin.jpeg'}, 
            'Chocolate Brownie': {'cost': 50, 'image_path': 'chocolate brownie.jpeg'}, 
            'Caesar Salad': {'cost': 110, 'image_path': 'caesar salad.jpeg'}, 
            'Margherita Pizza': {'cost': 150, 'image_path': 'margherita.jpeg'}, 
            'Veggie Wrap': {'cost': 100, 'image_path': 'viggie wrap.jpeg'}, 
            'Grilled Chicken Sandwhich': {'cost': 120, 'image_path': 'grilled chicken 
sandwhich.jpeg'}, 
            'Pasta Primavera': {'cost': 130, 'image_path': 'pasta primavera.jpeg'}, 
            'Cheesecake': {'cost': 80, 'image_path': 'chessecake.jpeg'}, 
            'Quiche Lorraine': {'cost': 70, 'image_path': 'Quiche Lorraine.jpeg'} 
        } 
9 | P a g e  
 
 
        # Selected items 
        self.selected_items = {} 
 
        # Dictionary to store quantity labels for each item 
        self.quantity_labels = {} 
 
        # Dictionary to store cost labels for each item 
        self.cost_labels = {} 
 
        # Dictionary to store image labels for each item 
        self.image_labels = {} 
 
        # Dictionary to store images for each item 
        self.item_images = {} 
 
        # GUI components 
        self.menu_label = tk.Label(root, text="Menu", font=("Helvetica", 16, "bold"), 
bg='SystemButtonFace')  # Use a standard system color 
        self.menu_label.pack(pady=(20, 10)) 
 
        # Create a canvas with a vertical scrollbar 
        canvas = tk.Canvas(root) 
        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True) 
 
        scrollbar = tk.Scrollbar(root, command=canvas.yview) 
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y) 
 
        canvas.configure(yscrollcommand=scrollbar.set) 
        canvas.bind('<Configure>', lambda e: 
canvas.configure(scrollregion=canvas.bbox("all"))) 
 
        # Create a frame inside the canvas to hold the menu items 
        frame = tk.Frame(canvas, bg='SystemButtonFace')  # Use a standard system color 
        canvas.create_window((0, 0), window=frame, anchor="nw") 
 
        frame_width = 400  # Increased width for each frame 
        frame_height = 100  # Increased height for each frame 
 
        for idx, item in enumerate(self.menu_items): 
            item_frame = tk.Frame(frame, bd=3, relief=tk.GROOVE, width=frame_width, 
height=frame_height, bg='SystemButtonFace')  # Use a standard system color 
            item_frame.pack(padx=10, pady=5, fill=tk.X) 
 
            # Load and resize the image 
            image_path = self.menu_items[item]['image_path'] 
            item_image = self.load_and_resize_image(image_path) 
            # Store the image for each item 
            self.item_images[item] = item_image 
 
            # Display the image in the frame 
10 | P a g e  
 
            image_label = tk.Label(item_frame, image=item_image, bg='SystemButtonFace')  # 
Use a standard system color 
            image_label.image = item_image 
            image_label.pack(side=tk.LEFT, padx=(10, 5), pady=(5, 0)) 
            # Store the image label for each item 
            self.image_labels[item] = image_label 
 
            item_label = tk.Label(item_frame, text=item, font=("Helvetica", 14), 
bg='SystemButtonFace', fg="black")  # Use a standard system color and white text 
            item_label.pack(side=tk.TOP, padx=(10, 5), pady=(5, 0)) 
 
            cost_label = tk.Label(item_frame, text=f"Cost: 
₹{self.menu_items[item]['cost']:.2f}", font=("Helvetica", 10), fg="gray", 
bg='SystemButtonFace')  # Use a standard system color 
            cost_label.pack(side=tk.TOP, padx=(10, 5), pady=(0, 5)) 
            # Store the cost label for each item 
            self.cost_labels[item] = cost_label 
 
            subtract_button = tk.Button(item_frame, text="-", command=lambda i=item: 
self.subtract_from_cart(i), font=("Helvetica", 12), bg='SystemButtonFace')  # Use a 
standard system color 
            subtract_button.pack(side=tk.RIGHT, pady=5) 
 
            quantity_label = tk.Label(item_frame, text="0", font=("Helvetica", 12), 
bg='SystemButtonFace')  # Use a standard system color 
            quantity_label.pack(side=tk.RIGHT, pady=5) 
            # Store the quantity label for each item 
            self.quantity_labels[item] = quantity_label 
 
            add_button = tk.Button(item_frame, text="+", command=lambda i=item: 
self.add_to_cart(i), font=("Helvetica", 12), bg='SystemButtonFace')  # Use a standard 
system color 
            add_button.pack(side=tk.RIGHT, pady=5) 
 
        self.place_order_button = tk.Button(frame, text="Place Order", 
command=self.place_order, font=("Helvetica", 12, "bold"), bg="#2196F3", fg="white") 
        self.place_order_button.pack(pady=10) 
 
        # Floating frame at the bottom 
        self.bottom_frame = tk.Frame(root, bd=3, relief=tk.RAISED) 
        self.bottom_frame.pack(side=tk.BOTTOM, fill=tk.X) 
        self.bottom_frame.bind('<Button-1>', self.show_cart) 
 
        self.items_in_cart_label = tk.Label(self.bottom_frame, text="Items in Cart: 0", 
font=("Helvetica", 12), bg='green', fg='white')  # Use a standard system color 
        self.items_in_cart_label.pack(side=tk.LEFT, padx=10) 
 
        self.total_cost_label = tk.Label(self.bottom_frame, text="Total Cost: ₹0.00", 
font=("Helvetica", 12), bg='green', fg='white')  # Use a standard system color 
        self.total_cost_label.pack(side=tk.RIGHT, padx=10) 
 
    def add_to_cart(self, item): 
11 | P a g e  
 
        if item in self.selected_items: 
            self.selected_items[item] += 1 
        else: 
            self.selected_items[item] = 1 
        self.update_cart() 
 
    def subtract_from_cart(self, item): 
        if item in self.selected_items and self.selected_items[item] > 0: 
            self.selected_items[item] -= 1 
            if self.selected_items[item] == 0: 
                del self.selected_items[item] 
        self.update_cart() 
 
    def update_cart(self): 
        # Update items in cart and total cost labels 
        num_items_in_cart = sum(self.selected_items.values()) 
        total_cost = sum(self.menu_items[item]['cost'] * quantity for item, quantity in 
self.selected_items.items()) 
        self.items_in_cart_label.config(text=f"Items in Cart: {num_items_in_cart}") 
        self.total_cost_label.config(text=f"Total Cost: ₹{total_cost:.2f}") 
 
        # Update quantity labels, cost labels, and images in the menu 
        for item, quantity_label in self.quantity_labels.items(): 
            quantity_label.config(text=str(self.selected_items.get(item, 0))) 
 
        for item, cost_label in self.cost_labels.items(): 
            cost_label.config(text=f"Cost: ₹{self.menu_items[item]['cost']:.2f}") 
 
        for item, image_label in self.image_labels.items(): 
            image_label.config(image=self.item_images[item]) 
 
    def load_and_resize_image(self, image_path): 
        img = Image.open(image_path) 
        img = img.resize((80, 80), Image.BILINEAR) 
        img = ImageTk.PhotoImage(img) 
        return img 
 
    def place_order(self): 
        total_cost = sum(self.menu_items[item]['cost'] * quantity for item, quantity in 
self.selected_items.items()) 
        messagebox.showinfo("Order Placed", f"Thanks for ordering. You will have your food 
in a few minutes.\nTotal Cost: ₹{total_cost:.2f}") 
        self.selected_items = {} 
        self.update_cart() 
 
    def show_cart(self, event): 
        cart_window = tk.Toplevel(self.root) 
        cart_window.title("Cart") 
 
        cart_listbox = tk.Listbox(cart_window, font=("Helvetica", 12)) 
        cart_listbox.pack(padx=10, pady=10) 
 
12 | P a g e  
 
        for item, quantity in self.selected_items.items(): 
            cart_listbox.insert(tk.END, f"{item} x{quantity}") 
 
if __name__ == "__main__": 
    root = tk.Tk() 
    app = CafeteriaOrderingSystem(root) 
    root.mainloop()
